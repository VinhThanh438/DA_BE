import { wrapSchema } from '@common/helpers/wrap-schema.helper';
import { AddressType, FinanceType } from '@prisma/client/default';
import { Joi, schema } from 'express-validation';

export const createEmployee: schema = {
    body: wrapSchema(
        Joi.object({
            code: Joi.string().required().max(50), // Required, generated by cuid() in model
            email: Joi.string().email().optional().allow(null, ''), // Optional
            name: Joi.string().optional().allow(null, '').max(100), // Optional
            gender: Joi.boolean().optional(), // Optional, true = male, false = female
            age: Joi.number().integer().optional().min(0).max(150), // Optional, added max for realism
            marital_status: Joi.boolean().optional(), // Optional
            working_status: Joi.boolean().optional(), // Optional
            employee_status: Joi.string().optional().allow(null, '').max(100), // Optional
            date_of_birth: Joi.date().optional(), // Optional
            phone: Joi.string().optional().allow(null, '').max(20), // Optional, added max length
            tax: Joi.string().optional().allow(null, '').max(50), // Optional, added max length
            ethnicity: Joi.string().optional().allow(null, '').max(100), // Optional
            religion: Joi.string().optional().allow(null, '').max(100), // Optional
            attendance_code: Joi.string().optional().allow(null, '').max(50), // Optional
            description: Joi.string().optional().allow(null, '').max(255), // Optional
            avatar: Joi.string().uri().optional().allow(null, ''), // Optional

            // Identity
            identity_code: Joi.string().optional().allow(null, '').max(20), // Optional, added max length
            identity_issued_place: Joi.string().optional().allow(null, '').max(100), // Optional
            identity_issued_date: Joi.date().optional(), // Optional
            identity_expired_date: Joi.date().optional(), // Optional
            indentity_files: Joi.array().items(Joi.any()).optional(), // Optional, JSON array

            // Passport
            passport_code: Joi.string().optional().allow(null, '').max(20), // Optional, added max length
            passport_issued_place: Joi.string().optional().allow(null, '').max(100), // Optional
            passport_issued_date: Joi.date().optional(), // Optional
            passport_expired_date: Joi.date().optional(), // Optional
            passport_files: Joi.array().items(Joi.any()).optional(), // Optional, JSON array

            organization_id: Joi.number().integer().optional(), // Optional
            job_position_id: Joi.number().integer().optional(), // Optional

            trial_date: Joi.date().optional(), // Optional
            official_date: Joi.date().optional(), // Optional

            // Education
            education: Joi.object({
                education_level: Joi.string().optional().allow(null, '').max(100), // Optional in model
                training_level: Joi.string().optional().allow(null, '').max(100), // Optional
                graduated_place: Joi.string().required().max(255), // Required in model
                faculty: Joi.string().optional().allow(null, '').max(100), // Optional
                major: Joi.string().optional().allow(null, '').max(100), // Optional
                graduation_year: Joi.number().integer().optional().min(1900).max(new Date().getFullYear()), // Optional
            }).optional(),

            // Finance (EmployeeFinances)
            finance: Joi.object({
                name: Joi.string().optional().allow(null, '').max(100), // Optional in model
                amount: Joi.number().optional(), // Optional (Decimal in model)
                note: Joi.string().optional().allow(null, '').max(255), // Optional
                status: Joi.string().optional().allow(null, '').max(50), // Optional
                type: Joi.string()
                    .valid(...Object.values(FinanceType)) // Use FinanceType enum
                    .optional()
                    .allow(null, ''),
            }).optional(),

            // Address
            address: Joi.object({
                country: Joi.string().optional().allow(null, '').max(100).default('Viá»‡t Nam'), // Optional, default in model
                province: Joi.string().optional().allow(null, '').max(100), // Optional
                district: Joi.string().optional().allow(null, '').max(100), // Optional
                ward: Joi.string().optional().allow(null, '').max(100), // Optional
                details: Joi.string().optional().allow(null, '').max(255), // Optional
                type: Joi.string()
                    .valid(...Object.values(AddressType)) // Use AddressType enum
                    .optional()
                    .allow(null, ''),
            }).optional(),

            // Emergency Contact
            emergency_contact: Joi.object({
                name: Joi.string().optional().allow(null, '').max(100), // Optional in model
                email: Joi.string().email().optional().allow(null, ''), // Optional
                relationship: Joi.string().optional().allow(null, '').max(50), // Optional
                address: Joi.string().optional().allow(null, '').max(255), // Optional
                phone: Joi.string().optional().allow(null, '').max(20), // Optional
            }).optional(),

            // Contract (EmployeeContracts)
            contract: Joi.object({
                code: Joi.string().required().max(50), // Required in model
                type: Joi.string().optional().allow(null, '').max(50), // Optional
                start_date: Joi.date().optional(), // Optional
                end_date: Joi.date().optional(), // Optional
                status: Joi.string().optional().allow(null, '').max(50), // Optional
            }).optional(),

            // Social Insurance
            social_insurance: Joi.object({
                is_participating: Joi.boolean().default(false), // Optional, default in model
                rate: Joi.number().optional(), // Optional (Float in model)
                insurance_number: Joi.string().optional().allow(null, '').max(50), // Optional, unique in model
                insurance_salary: Joi.number().optional(), // Optional (Float in model)
                start_date: Joi.date().optional(), // Optional
            }).optional(),
        }),
    ),
};

export const updateEmployee: schema = {
    params: wrapSchema(
        Joi.object({
            id: Joi.number().required(), // Required for update
        }),
    ),
    body: wrapSchema(
        Joi.object({
            code: Joi.string().optional().max(50), // Optional for update
            email: Joi.string().email().optional().allow(null, ''), // Optional
            name: Joi.string().optional().allow(null, '').max(100), // Optional
            gender: Joi.boolean().optional(), // Optional
            age: Joi.number().integer().optional().min(0).max(150), // Optional
            marital_status: Joi.boolean().optional(), // Optional
            working_status: Joi.boolean().optional(), // Optional
            employee_status: Joi.string().optional().allow(null, '').max(100), // Optional
            date_of_birth: Joi.date().optional(), // Optional
            phone: Joi.string().optional().allow(null, '').max(20), // Optional
            tax: Joi.string().optional().allow(null, '').max(50), // Optional
            ethnicity: Joi.string().optional().allow(null, '').max(100), // Optional
            religion: Joi.string().optional().allow(null, '').max(100), // Optional
            attendance_code: Joi.string().optional().allow(null, '').max(50), // Optional
            description: Joi.string().optional().allow(null, '').max(255), // Optional
            avatar: Joi.string().uri().optional().allow(null, ''), // Optional

            // Identity
            identity_code: Joi.string().optional().allow(null, '').max(20), // Optional
            identity_issued_place: Joi.string().optional().allow(null, '').max(100), // Optional
            identity_issued_date: Joi.date().optional(), // Optional
            identity_expired_date: Joi.date().optional(), // Optional
            indentity_files: Joi.array().items(Joi.any()).optional(), // Optional

            // Passport
            passport_code: Joi.string().optional().allow(null, '').max(20), // Optional
            passport_issued_place: Joi.string().optional().allow(null, '').max(100), // Optional
            passport_issued_date: Joi.date().optional(), // Optional
            passport_expired_date: Joi.date().optional(), // Optional
            passport_files: Joi.array().items(Joi.any()).optional(), // Optional

            organization_id: Joi.number().integer().optional(), // Optional
            job_position_id: Joi.number().integer().optional(), // Optional

            trial_date: Joi.date().optional(), // Optional
            official_date: Joi.date().optional(), // Optional

            // Education
            education: Joi.object({
                id: Joi.number().required(),
                education_level: Joi.string().optional().allow(null, '').max(100), // Optional
                training_level: Joi.string().optional().allow(null, '').max(100), // Optional
                graduated_place: Joi.string().optional().allow(null, '').max(255), // Optional for update
                faculty: Joi.string().optional().allow(null, '').max(100), // Optional
                major: Joi.string().optional().allow(null, '').max(100), // Optional
                graduation_year: Joi.number().integer().optional().min(1900).max(new Date().getFullYear()), // Optional
            }).optional(),

            // Finance (EmployeeFinances)
            employee_finance: Joi.object({
                id: Joi.number().required(),
                name: Joi.string().optional().allow(null, '').max(100), // Optional
                amount: Joi.number().optional(), // Optional
                note: Joi.string().optional().allow(null, '').max(255), // Optional
                status: Joi.string().optional().allow(null, '').max(50), // Optional
                type: Joi.string()
                    .valid(...Object.values(FinanceType)) // Use FinanceType enum
                    .optional()
                    .allow(null, ''),
            }).optional(),

            // Address
            address: Joi.object({
                id: Joi.number().required(),
                country: Joi.string().optional().allow(null, '').max(100).default('Viá»‡t Nam'), // Optional
                province: Joi.string().optional().allow(null, '').max(100), // Optional
                district: Joi.string().optional().allow(null, '').max(100), // Optional
                ward: Joi.string().optional().allow(null, '').max(100), // Optional
                details: Joi.string().optional().allow(null, '').max(255), // Optional
                type: Joi.string()
                    .valid(...Object.values(AddressType)) // Use AddressType enum
                    .optional()
                    .allow(null, ''),
            }).optional(),

            // Emergency Contact
            emergency_contact: Joi.object({
                id: Joi.number().required(),
                name: Joi.string().optional().allow(null, '').max(100), // Optional
                email: Joi.string().email().optional().allow(null, ''), // Optional
                relationship: Joi.string().optional().allow(null, '').max(50), // Optional
                address: Joi.string().optional().allow(null, '').max(255), // Optional
                phone: Joi.string().optional().allow(null, '').max(20), // Optional
            }).optional(),

            // Contract (EmployeeContracts)
            employee_contract: Joi.object({
                id: Joi.number().required(),
                code: Joi.string().optional().allow(null, '').max(50), // Optional for update
                type: Joi.string().optional().allow(null, '').max(50), // Optional
                start_date: Joi.date().optional(), // Optional
                end_date: Joi.date().optional(), // Optional
                status: Joi.string().optional().allow(null, '').max(50), // Optional
            }).optional(),

            // Social Insurance
            social_insurance: Joi.object({
                id: Joi.number().required(),
                is_participating: Joi.boolean().optional(), // Optional
                rate: Joi.number().optional(), // Optional
                insurance_number: Joi.string().optional().allow(null, '').max(50), // Optional
                insurance_salary: Joi.number().optional(), // Optional
                start_date: Joi.date().optional(), // Optional
            }).optional(),
        }),
    ),
};
