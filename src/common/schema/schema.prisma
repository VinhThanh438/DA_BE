// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define your models
model Users {
  id           Int  @id @default(autoincrement())
  username     String  @unique
  password     String
  email        String  @unique
  fullname     String
  age          Int?
  phone_number String?
  description  String?
  avatar       String?
  type         String
  is_disabled  Boolean @default(false)
  created_by   String?

  posts         Posts[]
  comments      Comments[]
  likes         Likes[]
  saved_posts   SavedPosts[]
  shared_posts  SharedPosts[]
  notifications Notifications[]

  followers     Follows[] @relation(name: "UserFollowers")
  following     Follows[] @relation(name: "UserFollowing")

  reports_made       Reports[] @relation(name: "UserReporter") // Người dùng báo cáo
  reports_received   Reports[] @relation(name: "UserReported") // Người bị báo cáo

  blocks_initiated   Blocks[]  @relation(name: "UserBlocks")   // Người dùng block người khác
  blocks_received    Blocks[]  @relation(name: "UserBlocked")  // Người bị block

  Tokens Tokens[]
}

model Follows {
  id           Int @id @default(autoincrement())
  following_id Int
  follower_id  Int

  following    Users @relation(name: "UserFollowing", fields: [following_id], references: [id], onDelete: Cascade)
  follower     Users @relation(name: "UserFollowers", fields: [follower_id], references: [id], onDelete: Cascade)

  @@unique([following_id, follower_id])
}

model Blocks {
  id         Int @id @default(autoincrement())
  blocked_id Int
  user_id    Int

  blocked    Users @relation(name: "UserBlocked", fields: [blocked_id], references: [id], onDelete: Cascade)
  user       Users @relation(name: "UserBlocks", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([blocked_id, user_id])
}

model Reports {
  id          Int  @id @default(autoincrement())
  reason      String
  comment_id  Int?
  post_id     Int?
  user_id     Int
  reported_id Int

  comment     Comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  post        Posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)
  reporter    Users @relation(name: "UserReporter", fields: [user_id], references: [id], onDelete: Cascade)
  reported    Users @relation(name: "UserReported", fields: [reported_id], references: [id], onDelete: Cascade)
}

model Tokens {
  id            Int    @id @default(autoincrement())
  user_id       Int
  access_token  String
  refresh_token String
  expired_at    DateTime

  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  user_data     Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([refresh_token])
}

model Admins {
  id       Int  @id @default(autoincrement())
  username String  @unique
  password String
}

model Posts {
  id      Int  @id @default(autoincrement())
  content String
  user_id Int
  user    Users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  comments     Comments[]
  likes        Likes[]
  saved_posts  SavedPosts[]
  shared_posts SharedPosts[]
  post_medias  PostMedias[]
  post_topics  PostTopics[]

  reports      Reports[]
}

model Comments {
  id       Int  @id @default(autoincrement())
  content  String
  user_id  Int?
  post_id  Int?
  user     Users? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post     Posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)

  reports  Reports[]
}

model Likes {
  id      Int  @id @default(autoincrement())
  user_id Int?
  post_id Int?
  user    Users? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post    Posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model SavedPosts {
  id      Int  @id @default(autoincrement())
  user_id Int?
  post_id Int?
  user    Users? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post    Posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model SharedPosts {
  id      Int  @id @default(autoincrement())
  user_id Int?
  post_id Int?
  content String
  user    Users? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post    Posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model PostMedias {
  id       Int  @id @default(autoincrement())
  url      String
  priority Int?
  post_id  Int?
  post     Posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model Topics {
  id   Int @id @default(autoincrement())
  name String @unique

  post_topics PostTopics[]
}

model PostTopics {
  id       Int @id @default(autoincrement())
  topic_id Int?
  post_id  Int?
  topic    Topics? @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  post     Posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model Notifications {
  id      Int  @id @default(autoincrement())
  action  String
  is_read Boolean @default(false)
  user_id Int
  user    Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
